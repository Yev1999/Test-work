{"id":"../node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/URLHash.ts","dependencies":[{"name":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/tsconfig.json","includedInParent":true,"mtime":1670944116123},{"name":"/Users/yevheniinaljvka/Desktop/JS/Test-work/package.json","includedInParent":true,"mtime":1674921174495},{"name":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/package.json","includedInParent":true,"mtime":1674987761283},{"name":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/.babelrc","includedInParent":true,"mtime":1670944116117},{"name":"@splidejs/splide","loc":{"line":4,"column":25,"index":128},"parent":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/URLHash.ts","resolved":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/node_modules/@splidejs/splide/dist/js/splide.esm.js"},{"name":"@splidejs/splide/src/js/utils","loc":{"line":5,"column":24,"index":173},"parent":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/URLHash.ts","resolved":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/node_modules/@splidejs/splide/src/js/utils/index.ts"},{"name":"./constants","loc":{"line":6,"column":28,"index":235},"parent":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/URLHash.ts","resolved":"/Users/yevheniinaljvka/Desktop/JS/Test-work/node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/constants.ts"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URLHash = void 0;\nconst splide_1 = require(\"@splidejs/splide\");\nconst utils_1 = require(\"@splidejs/splide/src/js/utils\");\nconst constants_1 = require(\"./constants\");\n/**\n * The extension for observing the URL hash change\n * and moving the slider to the slide that is associated with the hash value.\n *\n * @since 0.2.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A URLHash component object.\n */\nfunction URLHash(Splide, Components, options) {\n    const { on, bind } = (0, splide_1.EventInterface)(Splide);\n    const { setIndex, go } = Components.Controller;\n    /**\n       * Called when the component is constructed.\n       * Determines the initial slide index by the URL hash.\n       */\n    function setup() {\n        const index = convertHashToIndex(location.hash);\n        setIndex(index > -1 ? index : options.start || 0);\n    }\n    /**\n       * Called when the component is mounted.\n       */\n    function mount() {\n        on(splide_1.EVENT_ACTIVE, onActive);\n        bind(window, 'hashchange', onHashChange);\n    }\n    /**\n       * Called when any slide becomes active.\n       *\n       * @param Slide - A SlideComponent that gets active.\n       */\n    function onActive(Slide) {\n        const hash = (0, utils_1.getAttribute)(Slide.slide, constants_1.HASH_ATTRIBUTE_NAME);\n        if (hash) {\n            location.hash = hash;\n        }\n        else {\n            if (history) {\n                // Removes #.\n                history.replaceState(null, null, ' ');\n            }\n            else {\n                location.hash = '';\n            }\n        }\n    }\n    /**\n       * Called when the URL hash changes.\n       */\n    function onHashChange() {\n        const index = convertHashToIndex(location.hash);\n        if (index > -1) {\n            go(index);\n        }\n    }\n    /**\n       * Converts the provided hash string to the slide index.\n       *\n       * @param hash - A hash string to convert.\n       *\n       * @return A slide index on success, or otherwise `-1`.\n       */\n    function convertHashToIndex(hash) {\n        hash = hash.replace('#', '');\n        if (hash) {\n            const { slides } = Components.Elements;\n            for (let i = 0; i < slides.length; i++) {\n                if ((0, utils_1.getAttribute)(slides[i], constants_1.HASH_ATTRIBUTE_NAME) === hash) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    return {\n        setup,\n        mount,\n    };\n}\nexports.URLHash = URLHash;\n"},"sourceMaps":{"js":{"version":3,"file":"URLHash.js","sourceRoot":"","sources":["../node_modules/@splidejs/splide-extension-url-hash/src/js/extensions/URLHash/URLHash.ts"],"names":[],"mappings":";;;AAAA,6CAA4G;AAC5G,yDAA6D;AAE7D,2CAAkD;AAGlD;;;;;;;;;;;GAWG;AACH,SAAgB,OAAO,CAAE,MAAc,EAAE,UAAsB,EAAE,OAAgB;IAC/E,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,IAAA,uBAAc,EAAE,MAAM,CAAE,CAAC;IAC9C,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,UAAU,CAAC,UAAU,CAAC;IAE/C;;;SAGE;IACF,SAAS,KAAK;QACZ,MAAM,KAAK,GAAG,kBAAkB,CAAE,QAAQ,CAAC,IAAI,CAAE,CAAC;QAClD,QAAQ,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAE,CAAC;IACtD,CAAC;IAED;;SAEE;IACF,SAAS,KAAK;QACZ,EAAE,CAAE,qBAAY,EAAE,QAAQ,CAAE,CAAC;QAC7B,IAAI,CAAE,MAAM,EAAE,YAAY,EAAE,YAAY,CAAE,CAAC;IAC7C,CAAC;IAED;;;;SAIE;IACF,SAAS,QAAQ,CAAE,KAAqB;QACtC,MAAM,IAAI,GAAG,IAAA,oBAAY,EAAE,KAAK,CAAC,KAAK,EAAE,+BAAmB,CAAE,CAAC;QAE9D,IAAK,IAAI,EAAG;YACV,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;SACtB;aAAM;YACL,IAAK,OAAO,EAAG;gBACb,aAAa;gBACb,OAAO,CAAC,YAAY,CAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAE,CAAC;aACzC;iBAAM;gBACL,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;aACpB;SACF;IACH,CAAC;IAED;;SAEE;IACF,SAAS,YAAY;QACnB,MAAM,KAAK,GAAG,kBAAkB,CAAE,QAAQ,CAAC,IAAI,CAAE,CAAC;QAElD,IAAK,KAAK,GAAG,CAAC,CAAC,EAAG;YAChB,EAAE,CAAE,KAAK,CAAE,CAAC;SACb;IACH,CAAC;IAED;;;;;;SAME;IACF,SAAS,kBAAkB,CAAE,IAAY;QACvC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAE,GAAG,EAAE,EAAE,CAAE,CAAC;QAE/B,IAAK,IAAI,EAAG;YACV,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC;YAEvC,KAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAG;gBACxC,IAAK,IAAA,oBAAY,EAAE,MAAM,CAAE,CAAC,CAAE,EAAE,+BAAmB,CAAE,KAAK,IAAI,EAAG;oBAC/D,OAAO,CAAC,CAAC;iBACV;aACF;SACF;QAED,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,OAAO;QACL,KAAK;QACL,KAAK;KACN,CAAC;AACJ,CAAC;AA/ED,0BA+EC","sourcesContent":["import { BaseComponent, Components, EventInterface, Options, Splide, EVENT_ACTIVE } from '@splidejs/splide';\r\nimport { getAttribute } from '@splidejs/splide/src/js/utils';\r\nimport { SlideComponent } from '@splidejs/splide/src/js/components/Slides/Slide';\r\nimport { HASH_ATTRIBUTE_NAME } from './constants';\r\n\r\n\r\n/**\r\n * The extension for observing the URL hash change\r\n * and moving the slider to the slide that is associated with the hash value.\r\n *\r\n * @since 0.2.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A URLHash component object.\r\n */\r\nexport function URLHash( Splide: Splide, Components: Components, options: Options ): BaseComponent {\r\n  const { on, bind } = EventInterface( Splide );\r\n  const { setIndex, go } = Components.Controller;\r\n\r\n  /**\r\n\t * Called when the component is constructed.\r\n\t * Determines the initial slide index by the URL hash.\r\n\t */\r\n  function setup(): void {\r\n    const index = convertHashToIndex( location.hash );\r\n    setIndex( index > -1 ? index : options.start || 0 );\r\n  }\r\n\r\n  /**\r\n\t * Called when the component is mounted.\r\n\t */\r\n  function mount(): void {\r\n    on( EVENT_ACTIVE, onActive );\r\n    bind( window, 'hashchange', onHashChange );\r\n  }\r\n\r\n  /**\r\n\t * Called when any slide becomes active.\r\n\t *\r\n\t * @param Slide - A SlideComponent that gets active.\r\n\t */\r\n  function onActive( Slide: SlideComponent ): void {\r\n    const hash = getAttribute( Slide.slide, HASH_ATTRIBUTE_NAME );\r\n\r\n    if ( hash ) {\r\n      location.hash = hash;\r\n    } else {\r\n      if ( history ) {\r\n        // Removes #.\r\n        history.replaceState( null, null, ' ' );\r\n      } else {\r\n        location.hash = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Called when the URL hash changes.\r\n\t */\r\n  function onHashChange(): void {\r\n    const index = convertHashToIndex( location.hash );\r\n\r\n    if ( index > -1 ) {\r\n      go( index );\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Converts the provided hash string to the slide index.\r\n\t *\r\n\t * @param hash - A hash string to convert.\r\n\t *\r\n\t * @return A slide index on success, or otherwise `-1`.\r\n\t */\r\n  function convertHashToIndex( hash: string ): number {\r\n    hash = hash.replace( '#', '' );\r\n\r\n    if ( hash ) {\r\n      const { slides } = Components.Elements;\r\n\r\n      for ( let i = 0; i < slides.length; i++ ) {\r\n        if ( getAttribute( slides[ i ], HASH_ATTRIBUTE_NAME ) === hash ) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    mount,\r\n  };\r\n}\r\n"]}},"error":null,"hash":"2af0e3db7e80444d9a21433eaaa70dbf","cacheData":{"env":{}}}